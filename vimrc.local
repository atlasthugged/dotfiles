set hidden
set ignorecase smartcase
set scrolloff=3
set relativenumber

" Toggle search highlight
set hlsearch
nnoremap <CR> :nohls <CR>
" nnoremap <silent> <space> :nohl<Bar>:echo<CR>

" Set split widths for auto resizing
set winwidth=74
" set winminwidth=40
set winheight=10
set winminheight=10
set winheight=999

" Toggles relative number
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

nnoremap <C-n> :call NumberToggle()<cr>

" Color scheme
" Fix color for solarized
set t_Co=256
" Highlight the status line
" highlight StatusLine ctermfg=blue ctermbg=yellow
colorscheme base16-spacemacs
set background=dark

:map <leader>r :!ruby %<cr>

let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": split($TMUX, ",")[0], "target_pane": ":.2"}

:map <leader>s :so ~/.vimrc<cr>
inoremap <C-r><C-r> <C-o>:reg<cr>

"Syntastic setup from github 
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
"
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_loc_list_height = 5
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_wq = 1
" let g:syntastic_javascript_checkers=['eslint']
" let g:syntastic_error_symbol = '‚ùå'
" let g:syntastic_style_error_symbol = 'üë∫'
" let g:syntastic_warning_symbol = 'üëπ'
" let g:syntastic_style_warning_symbol = 'üí©'
" highlight link SyntasticErrorSign SignColumn
" highlight link SyntasticWarningSign SignColumn
" highlight link SyntasticStyleErrorSign SignColumn
" highlight link SyntasticStyleWarningSign SignColumn
"
" " Elm Syntastic
" let g:elm_syntastic_show_warnings = 1
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 0
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_auto_jump = 0

" Ale list
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 1

" Fix highlighting parens
" hi MatchParen cterm=none ctermbg=green ctermfg=blue

" Emmet tab completion
imap <expr> <C-E> emmet#expandAbbrIntelligent("\<tab>")

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<C-n>"
let g:UltiSnipsJumpBackwardTrigger="<C-p>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

let g:UltiSnipsMappingsToIgnore = ['autocomplete']


" Additional UltiSnips config.
let g:UltiSnipsSnippetsDir = '~/.vim/ultisnips'
let g:UltiSnipsSnippetDirectories = ['ultisnips']



" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>


" From chris toomey
" let g:UltiSnipsSnippetsDir='~/.vim/snippets'
let g:UltiSnipsEditSplit='vertical'
" let g:UltiSnipsExpandTrigger           = '<C-]>'
" let g:UltiSnipsJumpForwardTrigger      = '<C-]>'
" let g::UltiSnipsJumpBackwardTrigger     = '<C-[>'

nnoremap <leader>ue :UltiSnipsEdit<cr>

:map <leader>rcl :sp ~/.vimrc.local<cr>
:map <leader>rcd :sp ~/.vimrc<cr>
:map <leader>rcbl :sp ~/.vimrc.bundles.local<cr>
:map <leader>rcbd :sp ~/.vimrc.bundles<cr>

" JSX
let g:jsx_ext_required = 0

" Sane cursor movement with line wrapping
noremap j gj
noremap k gk

" Ale lint settings
let g:ale_sign_error = '‚úñ'
let g:ale_sign_warning = '‚ö†'

" For airline integrstion
let g:airline#extensions#ale#error_symbol = '‚úñ:'
let g:airline#extensions#ale#warning_symbol = '‚ö†:'


" NeoComplete setup
"Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 1
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
